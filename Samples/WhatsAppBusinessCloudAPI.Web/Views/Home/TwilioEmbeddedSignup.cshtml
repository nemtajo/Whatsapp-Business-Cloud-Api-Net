@model WhatsappBusiness.CloudApi.Configurations.EmbeddedSignupConfiguration
@{
    ViewData["Title"] = "Twilio Embedded Signup";
    ViewData["CurrentPage"] = "Twilio Embedded Signup";
    Layout = "~/Views/Shared/AdminLTE/_AdminLayout.cshtml";
    ViewData["ControllerName"] = "Home";
    ViewData["ActionName"] = "TwilioEmbeddedSignup";
}

<style>
    .readonly-config {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
    }
    .config-info {
        background-color: #e7f3ff;
        border-left: 4px solid #007bff;
        padding: 15px;
        margin-bottom: 20px;
    }
</style>

<section class="content">
<div class="row">
    <div class="col-md-12">
        <h2>Twilio WhatsApp Business Embedded Signup</h2>
        <p>This page allows other businesses to login and give your app permission to send WhatsApp messages on their behalf using Twilio integration.</p>
        
        <div class="card">
            <div class="card-header">
                <h4>Twilio Embedded Signup Flow</h4>
            </div>
            <div class="card-body">
                <div class="alert alert-warning">
                    <h5><i class="fas fa-exclamation-triangle"></i> <strong>Tech Provider Status Required</strong></h5>
                    <p><strong>IMPORTANT:</strong> To use WhatsApp Business Embedded Signup with Twilio, you must have <strong>Tech Provider</strong> status with Meta.</p>
                </div>

                <div class="alert alert-info">
                    <strong>Instructions:</strong>
                    <ol>
                        <li><strong>Tech Provider Status:</strong> <span style="color: #d10014;">Ensure you have Tech Provider status with Meta before proceeding.</span> </li>
                        <li>The configuration below is loaded from your appsettings.json</li>
                        <li>The Base URL is automatically detected if not configured in appsettings.json</li>
                        <li><strong>Critical Meta App Configuration:</strong> In your Meta/Facebook app settings, you must configure THREE essential settings:
                            <ul>
                                <li><strong>App Domains:</strong> Add your domain WITHOUT protocol (e.g., <code style="color: #0066cc;">yourdomain.com</code> or <code style="color: #0066cc;">localhost</code>) in Settings > Basic > App Domains. <span style="color: #d10014;">This is CRITICAL - the domain must match exactly without https:// or www.</span></li>
                                <li><strong>Valid OAuth Redirect URIs:</strong> Add your base domain (e.g., <code style="color: #0066cc;">https://whatsapp.yourdomain.com</code> or <code style="color: #0066cc;">http://localhost:5000</code>) in Facebook Login > Settings > Valid OAuth Redirect URIs. <strong>Do not include paths</strong> - Facebook will add its own paths during the OAuth flow. <strong>Note:</strong> Meta will automatically add a trailing slash to your domain.</li>
                                <li><strong>JavaScript SDK Domains:</strong> Add the base URL (e.g., <code style="color: #0066cc;">https://whatsapp.yourdomain.com</code>) to Allowed Domains in Facebook Login for Business > Settings. <strong>Note:</strong> Meta will automatically add a trailing slash making it <code style="color: #0066cc;">https://whatsapp.yourdomain.com/</code>.</li>
                            </ul>
                        </li>
                        <li><strong>OAuth Flow Options:</strong> This page now supports two OAuth flows:
                            <ul>
                                <li><strong>Manual OAuth Flow (Recommended):</strong> Uses direct URL redirection following Facebook's manual flow documentation. This avoids redirect URI mismatch issues that are common with the JavaScript SDK.</li>
                                <li><strong>SDK-based Flow (Fallback):</strong> Uses Facebook's JavaScript SDK. May encounter redirect URI validation issues on some configurations.</li>
                            </ul>
                        </li>
                        <li><strong>OAuth Redirect URI Important Note:</strong> The redirect URI must match your domain exactly. For Facebook Embedded Signup, you need to add <code style="color: #0066cc;">https://whatsapp.yourdomain.com</code> (just the base domain, no path) to Valid OAuth Redirect URIs in your Meta app settings. <strong>Note:</strong> Meta will automatically add a trailing slash making it <code style="color: #0066cc;">https://whatsapp.yourdomain.com/</code> - this is normal. Facebook will automatically append its own paths during the OAuth flow. <span style="color: #d10014;">Missing this configuration will cause OAuth error 191.</span></li>
                        <li><strong>App Domains Configuration:</strong> In Meta app Settings > Basic > App Domains, add <code style="color: #0066cc;">yourdomain.com</code> (your root domain without subdomain, protocol, or paths). <span style="color: #d10014;">This must match the base_domain shown in console logs.</span></li>
                        <li><strong>App Mode:</strong> Your Meta app should be in <strong>Live mode</strong> for token exchange to work properly. Development mode has restrictions that may cause token exchange failures.</li>
                        <li>Click the "Login with Facebook (Manual OAuth)" button to start the embedded signup flow with the recommended manual flow</li>
                        <li>Complete the WhatsApp Business signup process</li>
                        <li>The system will automatically exchange the authorization code for an access token</li>
                    </ol>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <h5>Configuration</h5>
                        <div class="form-group mb-3">
                            <label>Base URL:</label>
                            <input type="text" id="baseUrl" class="form-control readonly-config" value="@Model.BaseUrl" readonly />
                            <small class="form-text text-muted">Auto-detected if empty in appsettings.json</small>
                        </div>
                        <div class="form-group mb-3">
                            <label>Calculated Redirect URI:</label>
                            <input type="text" id="redirectUri" class="form-control readonly-config" value="" readonly />
                            <small class="form-text text-muted">This is the redirect URI that will be used for OAuth</small>
                        </div>
                        <div class="form-group mb-3">
                            <label>Meta App ID:</label>
                            <input type="text" id="appId" class="form-control readonly-config" value="@Model.AppId" readonly />
                            <small class="form-text text-muted">Configured in appsettings.json</small>
                        </div>
                        <div class="form-group mb-3">
                            <label>Meta App Secret:</label>
                            <input type="password" id="appSecret" class="form-control readonly-config" value="@Model.AppSecret" readonly />
                            <small class="form-text text-muted">Configured in appsettings.json (hidden for security)</small>
                        </div>
                        <div class="form-group mb-3">
                            <label>Configuration ID:</label>
                            <input type="text" id="configId" class="form-control readonly-config" value="@Model.ConfigurationId" readonly />
                            <small class="form-text text-muted">Configured in appsettings.json</small>
                        </div>
                        <div class="form-group mb-3">
                            <label>Graph API Version:</label>
                            <input type="text" id="apiVersion" class="form-control readonly-config" value="@Model.GraphApiVersion" readonly />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h5>Phone Number Selection</h5>
                        <div class="alert alert-warning">
                            <strong>Required:</strong> Please select how you would like to obtain your WhatsApp Business phone number:
                        </div>
                        
                        <div class="mb-3">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="phoneNumberType" id="purchaseNumber" value="purchase" onchange="onPhoneNumberTypeChange(this.value)">
                                <label class="form-check-label" for="purchaseNumber">
                                    <strong>Purchase a pre-verified Twilio number</strong>
                                    <small class="form-text text-muted d-block">Get a new WhatsApp Business verified Twilio phone number</small>
                                </label>
                            </div>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="radio" name="phoneNumberType" id="ownNumber" value="register-own" onchange="onPhoneNumberTypeChange(this.value)">
                                <label class="form-check-label" for="ownNumber">
                                    <strong>Use my own phone number</strong>
                                    <small class="form-text text-muted d-block">Use an existing phone number (requires OTP verification)</small>
                                </label>
                            </div>
                        </div>
                        
                        <h5>Signup Flow</h5>
                        <div id="fb-root"></div>
                        
                        <div class="mb-3">
                            <button id="signup-btn" onclick="launchWhatsAppSignup()" disabled
                                    style="background-color: #1877f2; border: 0; border-radius: 4px; color: #fff; cursor: pointer; font-family: Helvetica, Arial, sans-serif; font-size: 16px; font-weight: bold; height: 40px; padding: 0 24px; margin-right: 10px; opacity: 0.5;">
                                Login with Facebook (Manual OAuth)
                            </button>
                            
                            <button id="signup-sdk-btn" onclick="launchWhatsAppSignupSDK()" disabled
                                    style="background-color: #42b883; border: 0; border-radius: 4px; color: #fff; cursor: pointer; font-family: Helvetica, Arial, sans-serif; font-size: 14px; font-weight: bold; height: 40px; padding: 0 20px; opacity: 0.5;">
                                Fallback: SDK Flow
                            </button>
                        </div>
                        
                        <div class="alert alert-info mb-3">
                            <small>
                                <strong>Note:</strong> You must select a phone number option above before proceeding.<br>
                                <strong>Manual OAuth (Recommended):</strong> Uses direct URL redirection to avoid redirect URI mismatch issues.<br>
                                <strong>SDK Flow (Fallback):</strong> Uses Facebook SDK - try if manual flow doesn't work.
                            </small>
                        </div>
                        
                        <div class="mt-3">
                            <h6>Status:</h6>
                            <div id="status" class="alert alert-secondary">Ready to start signup process</div>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <div class="row">
                        <div class="col-md-6">
                            <h5>Session Info Response:</h5>
                            <pre id="session-info-response" class="bg-light p-3" style="max-height: 300px; overflow-y: auto;">Waiting for response...</pre>
                        </div>
                        <div class="col-md-6">
                            <h5>SDK Response:</h5>
                            <pre id="sdk-response" class="bg-light p-3" style="max-height: 300px; overflow-y: auto;">Waiting for response...</pre>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <h5>Token Exchange Request:</h5>
                    <pre id="token-request" class="bg-light p-3" style="max-height: 200px; overflow-y: auto;">No token exchange performed yet...</pre>
                </div>

                <div class="mt-4">
                    <h5>Token Exchange Response:</h5>
                    <pre id="token-response" class="bg-light p-3" style="max-height: 200px; overflow-y: auto;">No token exchange performed yet...</pre>
                </div>

                <div class="mt-4">
                    <div class="row">
                        <div class="col-md-6">
                            <h5>WABA Details Request:</h5>
                            <pre id="waba-request" class="bg-light p-3" style="max-height: 200px; overflow-y: auto;">No WABA details request yet...</pre>
                        </div>
                        <div class="col-md-6">
                            <h5>WABA Details Response:</h5>
                            <pre id="waba-response" class="bg-light p-3" style="max-height: 200px; overflow-y: auto;">No WABA details response yet...</pre>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <div class="row">
                        <div class="col-md-6">
                            <h5>Twilio Subaccount Request:</h5>
                            <pre id="twilio-request" class="bg-light p-3" style="max-height: 200px; overflow-y: auto;">No Twilio subaccount request yet...</pre>
                        </div>
                        <div class="col-md-6">
                            <h5>Twilio Subaccount Response:</h5>
                            <pre id="twilio-response" class="bg-light p-3" style="max-height: 200px; overflow-y: auto;">No Twilio subaccount response yet...</pre>
                        </div>
                    </div>
                </div>

                <!-- Phone Number Purchase Interface -->
                <div id="phone-number-purchase-section" class="mt-4" style="display: none;">
                    <div class="row">
                        <div class="col-12">
                            <div class="card border-primary">
                                <div class="card-header bg-primary text-white">
                                    <h5 class="mb-0">📞 Phone Number Purchase</h5>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info">
                                        <strong>Twilio Subaccount Created Successfully!</strong><br>
                                        Your Twilio subaccount is ready and will be linked to your WhatsApp Business Account (WABA) when you register a phone number.
                                        <br><small class="text-muted">Each WABA should be linked to exactly one Twilio subaccount for proper isolation and billing.</small>
                                    </div>

                                    <!-- Step 1: Country Selection -->
                                    <div id="country-selection-step" class="mb-4">
                                        <h6><span class="badge badge-primary">Step 1</span> Select Country</h6>
                                        <div class="form-group">
                                            <label for="country-select">Choose a country for your phone number:</label>
                                            <select id="country-select" class="form-control" onchange="onCountrySelected()">
                                                <option value="">Loading countries...</option>
                                            </select>
                                        </div>
                                        <button id="load-countries-btn" class="btn btn-outline-primary" onclick="loadAvailableCountries()">
                                            <i class="fas fa-globe"></i> Refresh Countries
                                        </button>
                                    </div>

                                    <!-- Step 2: Phone Number Type Selection -->
                                    <div id="phone-type-selection-step" class="mb-4" style="display: none;">
                                        <h6><span class="badge badge-primary">Step 2</span> Select Phone Number Type</h6>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="radio" name="purchasePhoneType" id="purchase-local" value="local" onchange="onPhoneTypeSelected()">
                                                    <label class="form-check-label" for="purchase-local">
                                                        <strong>Local Numbers</strong>
                                                        <small class="form-text text-muted d-block">Traditional landline-style numbers for the selected region</small>
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="radio" name="purchasePhoneType" id="purchase-mobile" value="mobile" onchange="onPhoneTypeSelected()">
                                                    <label class="form-check-label" for="purchase-mobile">
                                                        <strong>Mobile Numbers</strong>
                                                        <small class="form-text text-muted d-block">Mobile-style numbers with broader capabilities</small>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Step 3: Available Numbers List -->
                                    <div id="phone-numbers-list-step" class="mb-4" style="display: none;">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h6><span class="badge badge-primary">Step 3</span> Available Phone Numbers</h6>
                                            <button id="refresh-numbers-btn" class="btn btn-outline-secondary btn-sm" onclick="refreshPhoneNumbers()">
                                                <i class="fas fa-sync"></i> Refresh Numbers
                                            </button>
                                        </div>
                                        
                                        <div id="phone-numbers-loading" class="text-center" style="display: none;">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="sr-only">Loading phone numbers...</span>
                                            </div>
                                            <p class="mt-2">Loading available phone numbers...</p>
                                        </div>

                                        <div id="phone-numbers-container">
                                            <!-- Phone numbers will be populated here -->
                                        </div>
                                    </div>

                                    <!-- Step 4: Purchase Progress -->
                                    <div id="purchase-progress-step" class="mb-4" style="display: none;">
                                        <h6><span class="badge badge-success">Step 4</span> Purchase Progress</h6>
                                        <div class="progress mb-3">
                                            <div id="purchase-progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                                        </div>
                                        <div id="purchase-status" class="alert alert-info">
                                            Preparing to purchase phone number...
                                        </div>
                                    </div>

                                    <!-- Step 5: WhatsApp Registration -->
                                    <div id="whatsapp-registration-step" class="mb-4" style="display: none;">
                                        <h6><span class="badge badge-success">Step 5</span> WhatsApp Registration</h6>
                                        <div class="alert alert-success">
                                            <strong>Phone Number Purchased Successfully!</strong><br>
                                            Your phone number: <strong id="purchased-phone-number"></strong>
                                        </div>
                                        <button id="register-whatsapp-btn" class="btn btn-success" onclick="registerPhoneNumberForWhatsApp()">
                                            <i class="fas fa-whatsapp"></i> Register for WhatsApp Business
                                        </button>
                                        <div id="whatsapp-registration-status" class="mt-3" style="display: none;">
                                            <!-- WhatsApp registration status will be shown here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- WhatsApp Sender Registration Interface (shown after phone number purchase) -->
                <div id="whatsapp-sender-section" class="mt-4" style="display: none;">
                    <div class="row">
                        <div class="col-md-6">
                            <h5>Twilio WhatsApp Sender Request:</h5>
                            <pre id="whatsapp-sender-request" class="bg-light p-3" style="max-height: 200px; overflow-y: auto;">No WhatsApp sender request yet...</pre>
                        </div>
                        <div class="col-md-6">
                            <h5>Twilio WhatsApp Sender Response:</h5>
                            <pre id="whatsapp-sender-response" class="bg-light p-3" style="max-height: 200px; overflow-y: auto;">No WhatsApp sender response yet...</pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</section>

@Html.AntiForgeryToken()

@section Scripts {
    <script>
        // Function to get runtime base URL
        function getRuntimeBaseUrl() {
            return window.location.origin;
        }

        // Function to get runtime page URL
        function getRuntimePageUrl() {
            return window.location.href;
        }

        // Function to get base domain (for Meta app configuration)
        function getBaseDomain(url) {
            // Extract just the base domain with protocol, without any paths
            const urlObj = new URL(url);
            return `${urlObj.protocol}//${urlObj.host}`;
        }

        // Global variables for configuration (loaded from server and runtime)
        const pageUrlOfTheDeployedWebpage = getRuntimePageUrl();
        const baseUrlOfTheDeployedWebpage = getBaseDomain(pageUrlOfTheDeployedWebpage);
        const appSettingsBaseUrl = "@Model.BaseUrl";
        const redirectUri = (appSettingsBaseUrl ? appSettingsBaseUrl : baseUrlOfTheDeployedWebpage) + '/Home/TwilioEmbeddedSignup';
        const baseUrl = getBaseDomain(redirectUri);
        const appId = "@Model.AppId";
        const appSecret = "@Model.AppSecret";
        const embeddedSignupConfigurationId = "@Model.ConfigurationId";
        const metaGraphApiVersion = "@Model.GraphApiVersion";

        // Phone number type selection variable
        let phoneNumberTypeSelected = null; // "purchase" | "register-own" | null

        // Log the URLs for debugging
        console.log('App Settings Base URL:', appSettingsBaseUrl);
        console.log('Original Runtime Base URL:', baseUrlOfTheDeployedWebpage);
        console.log('Original Runtime Page URL:', pageUrlOfTheDeployedWebpage);
        console.log('Redirect URI used (for Meta app config):', redirectUri);
        console.log('Base Domain (for Meta app config):', baseUrl);

        // Update the Base URL display field with the runtime URL
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('baseUrl').value = baseUrl;
            document.getElementById('redirectUri').value = redirectUri;
            
            // Restore phone number type selection if stored in sessionStorage
            const storedPhoneType = sessionStorage.getItem('phoneNumberType');
            if (storedPhoneType) {
                phoneNumberTypeSelected = storedPhoneType;
                console.log('Restored phone number type from session:', phoneNumberTypeSelected);
                
                // Restore the radio button selection
                const radioElement = document.querySelector(`input[name="phoneNumberType"][value="${storedPhoneType}"]`);
                if (radioElement) {
                    radioElement.checked = true;
                    // Trigger the change event to update the UI
                    onPhoneNumberTypeChange(storedPhoneType);
                }
            }
            
            // Check for authorization code in URL on page load
            if (!checkForAuthCode()) {
                // Only show ready status if no auth code was found
                updateStatus('Please select a phone number type to continue', 'warning');
            }
        });

        // Update status message
        function updateStatus(message, type = 'info') {
            const statusDiv = document.getElementById('status');
            statusDiv.className = `alert alert-${type}`;
            statusDiv.textContent = message;
        }

        // Handle phone number type selection change
        function onPhoneNumberTypeChange(selectedValue) {
            phoneNumberTypeSelected = selectedValue;
            console.log('Phone number type selected:', phoneNumberTypeSelected);
            
            // Store the selection in sessionStorage to persist across redirects
            if (phoneNumberTypeSelected) {
                sessionStorage.setItem('phoneNumberType', phoneNumberTypeSelected);
            } else {
                sessionStorage.removeItem('phoneNumberType');
            }
            
            // Enable/disable buttons based on selection
            const signupBtn = document.getElementById('signup-btn');
            const signupSdkBtn = document.getElementById('signup-sdk-btn');
            
            if (phoneNumberTypeSelected) {
                // Enable buttons
                signupBtn.disabled = false;
                signupSdkBtn.disabled = false;
                signupBtn.style.opacity = '1';
                signupSdkBtn.style.opacity = '1';
                signupBtn.style.cursor = 'pointer';
                signupSdkBtn.style.cursor = 'pointer';
                
                updateStatus(`Phone number type selected: ${phoneNumberTypeSelected === 'purchase' ? 'Purchase pre-verified number' : 'Use own number'}. Ready to start signup process.`, 'success');
            } else {
                // Disable buttons
                signupBtn.disabled = true;
                signupSdkBtn.disabled = true;
                signupBtn.style.opacity = '0.5';
                signupSdkBtn.style.opacity = '0.5';
                signupBtn.style.cursor = 'not-allowed';
                signupSdkBtn.style.cursor = 'not-allowed';
                
                updateStatus('Please select a phone number type to continue', 'warning');
            }
        }

        // Initialize Facebook SDK
        window.fbAsyncInit = function() {
            try {
                FB.init({
                    appId: appId,
                    autoLogAppEvents: true,
                    xfbml: true,
                    version: metaGraphApiVersion
                });
                updateStatus('Facebook SDK initialized successfully', 'success');
            } catch (error) {
                console.error('Facebook SDK initialization error:', error);
                updateStatus('Facebook SDK initialization failed: ' + error.message, 'danger');
            }
        };

        // Load Facebook SDK
        (function(d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "https://connect.facebook.net/en_US/sdk.js";
            js.onerror = function() {
                updateStatus('Failed to load Facebook SDK', 'danger');
            };
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));

        // Message event listener for embedded signup
        window.addEventListener('message', (event) => {
            if (event.origin !== "https://www.facebook.com" && event.origin !== "https://web.facebook.com") {
                return;
            }
            try {
                const data = JSON.parse(event.data);
                if (data.type === 'WA_EMBEDDED_SIGNUP') {
                    // Handle different finish types
                    if (data.event === 'FINISH') {
                        // Default flow completion with phone number
                        const { phone_number_id, waba_id, business_id } = data.data;
                        console.log("Default flow completed - Phone number ID:", phone_number_id, "WABA ID:", waba_id, "Business ID:", business_id);
                        console.log("This WABA ID will be linked to the Twilio subaccount during phone number registration");
                        updateStatus(`Signup completed! Phone ID: ${phone_number_id}, WABA ID: ${waba_id}`, 'success');
                    } else if (data.event === 'FINISH_ONLY_WABA') {
                        // Completed flow without phone number (expected for purchase flow with only_waba_sharing)
                        const { waba_id, business_id } = data.data;
                        console.log("WABA-only flow completed - WABA ID:", waba_id, "Business ID:", business_id);
                        console.log("No phone number provided - this is expected for purchase flow where Twilio will handle phone numbers");
                        updateStatus(`WABA signup completed! WABA ID: ${waba_id} (No phone number - Twilio will handle this)`, 'success');
                    } else if (data.event === 'FINISH_WHATSAPP_BUSINESS_APP_ONBOARDING') {
                        // Completed flow with WhatsApp Business app number
                        const { phone_number_id, waba_id, business_id } = data.data;
                        console.log("WhatsApp Business app onboarding completed - Phone number ID:", phone_number_id, "WABA ID:", waba_id, "Business ID:", business_id);
                        updateStatus(`WhatsApp Business app signup completed! Phone ID: ${phone_number_id}, WABA ID: ${waba_id}`, 'success');
                    } else if (data.event === 'CANCEL') {
                        // User cancelled the Embedded Signup flow
                        const { current_step } = data.data;
                        console.warn("Cancel at ", current_step);
                        updateStatus(`Signup cancelled at step: ${current_step}`, 'warning');
                    } else if (data.event === 'ERROR') {
                        // Error occurred during the Embedded Signup flow
                        const { error_message } = data.data;
                        console.error("error ", error_message);
                        updateStatus(`Error occurred: ${error_message}`, 'danger');
                    }
                }
                document.getElementById("session-info-response").textContent = JSON.stringify(data, null, 2);
            } catch {
                console.log('Message received:', event.data);
            }
        });

        // Check for authorization code in URL (for manual OAuth flow)
        function checkForAuthCode() {
            const urlParams = new URLSearchParams(window.location.search);
            const code = urlParams.get('code');
            const state = urlParams.get('state');
            const error = urlParams.get('error');
            const errorDescription = urlParams.get('error_description');
            
            if (error) {
                updateStatus(`OAuth error: ${error} - ${errorDescription || 'Unknown error'}`, 'danger');
                document.getElementById("sdk-response").textContent = JSON.stringify({
                    error: error,
                    error_description: errorDescription,
                    url_params: Object.fromEntries(urlParams)
                }, null, 2);
                return;
            }
            
            if (code) {
                // Validate state parameter for security (if we have one stored)
                const storedState = sessionStorage.getItem('oauth_state');
                if (storedState && state !== storedState) {
                    updateStatus('OAuth state validation failed - possible CSRF attack', 'danger');
                    document.getElementById("sdk-response").textContent = JSON.stringify({
                        error: 'state_mismatch',
                        error_description: 'State parameter validation failed',
                        received_state: state,
                        expected_state: storedState
                    }, null, 2);
                    return;
                }
                
                // Clear stored state
                sessionStorage.removeItem('oauth_state');
                
                updateStatus('Authorization code received from URL, exchanging for access token...', 'info');
                console.log('Authorization code from URL:', code);
                console.log('State validation:', state === storedState ? 'PASSED' : 'N/A');
                console.log('Using redirect URI for token exchange:', redirectUri);
                
                // Show the received authorization response
                document.getElementById("sdk-response").textContent = JSON.stringify({
                    authorization_code: code,
                    state: state,
                    state_valid: !storedState || state === storedState,
                    method: 'Manual OAuth Flow',
                    redirect_uri_used: redirectUri,
                    url_params: Object.fromEntries(urlParams)
                }, null, 2);
                
                // Prepare the token exchange request
                const tokenRequest = {
                    code: code,
                    clientId: appId,
                    clientSecret: appSecret,
                    redirectUri: redirectUri
                };
                
                // Display the token exchange request
                document.getElementById("token-request").textContent = JSON.stringify(tokenRequest, null, 2);
                
                // Scroll to token exchange section
                document.getElementById("token-request").scrollIntoView({ behavior: 'smooth' });
                
                // Exchange the code for an access token via our backend
                fetch('/Home/ExchangeToken', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'Accept-Language': 'en-US,en;q=0.9'
                    },
                    body: JSON.stringify(tokenRequest)
                }).then(tokenResponse => {
                    return tokenResponse.json();
                }).then(tokenResult => {
                    document.getElementById("token-response").textContent = JSON.stringify(tokenResult, null, 2);
                    
                    if (tokenResult.success) {
                        updateStatus('Token exchange successful! Getting WABA details...', 'info');
                        
                        // Try different possible property names for the access token
                        const accessToken = tokenResult.access_token || tokenResult.accessToken || tokenResult.token || tokenResult.data?.access_token || tokenResult.data?.accessToken;
                        
                        if (!accessToken) {
                            console.error('Access token not found in response. Available properties:', Object.keys(tokenResult));
                            throw new Error('Access token not found in token exchange response');
                        }
                        
                        console.log('Using access token:', accessToken ? accessToken.substring(0, 20) + '...' : 'null');
                        
                        // Now get WABA details using the access token
                        return getSharedWABADetails(accessToken);
                    } else {
                        updateStatus(`Token exchange failed: ${tokenResult.error}`, 'danger');
                        throw new Error(tokenResult.error);
                    }
                }).then(wabaResult => {
                    console.log('WABA Details received:', wabaResult);
                    
                    if (wabaResult.success) {
                        updateStatus('WABA details retrieved! Creating Twilio subaccount...', 'info');
                        
                        // Create Twilio subaccount
                        return createTwilioSubaccount(wabaResult.data, phoneNumberTypeSelected);
                    } else {
                        updateStatus(`Failed to get WABA details: ${wabaResult.error}`, 'danger');
                        throw new Error(wabaResult.error);
                    }
                }).then(twilioResult => {
                    console.log('Twilio subaccount created:', twilioResult);
                    
                    if (twilioResult.success) {
                        updateStatus('Twilio subaccount created successfully! Authentication credentials are available for phone number operations.', 'success');
                        
                        // Store the subaccount details for potential phone number operations
                        const subaccountData = twilioResult.data;
                        console.log('Subaccount SID:', subaccountData.twilioSubaccountSid);
                        console.log('Authentication method:', subaccountData.authenticationMethod);
                        
                        // Determine which authentication credentials to use
                        let authSid = null;
                        let authToken = null;
                        
                        if (subaccountData.authenticationMethod === 'subaccount_auth_token' && subaccountData.twilioAuthToken) {
                            authSid = subaccountData.twilioSubaccountSid;
                            authToken = subaccountData.twilioAuthToken;
                            console.log('Using subaccount auth token for authentication');
                        } else if (subaccountData.authenticationMethod === 'main_account_credentials' && subaccountData.twilioMainAccountToken) {
                            authSid = subaccountData.twilioMainAccountSid;
                            authToken = subaccountData.twilioMainAccountToken;
                            console.log('Using main account credentials for authentication (targeting subaccount)');
                        } else {
                            console.warn('No valid authentication credentials available');
                            updateStatus('Warning: No authentication credentials available. Phone number operations may fail.', 'warning');
                        }
                        
                        // Handle phone number operations based on selected type
                        if (phoneNumberTypeSelected === 'purchase') {
                            updateStatus('Subaccount created. Handling Twilio phone number purchase...', 'info');
                            
                            // Handle Twilio phone number purchase
                            return handlePhoneNumberOperation(
                                subaccountData.twilioSubaccountSid,
                                authToken,
                                subaccountData.businessName,
                                'purchase',
                                null,
                                subaccountData.wabaId
                            );
                        } else if (phoneNumberTypeSelected === 'register-own') {
                            updateStatus('Subaccount created. Ready to register existing phone number for WhatsApp...', 'info');
                            
                            // For register-own flow, show WhatsApp Sender section immediately since there's no phone purchase step
                            document.getElementById('whatsapp-sender-section').style.display = 'block';
                            document.getElementById('whatsapp-sender-section').scrollIntoView({ behavior: 'smooth' });
                            
                            // Handle existing phone number registration for WhatsApp
                            return handlePhoneNumberOperation(
                                subaccountData.twilioSubaccountSid,
                                authToken,
                                subaccountData.businessName,
                                'register-own', // Use 'register-own' type for existing phone numbers
                                subaccountData.wabaPhoneNumberForDisplay, // Use the existing phone number from WABA
                                subaccountData.wabaId
                            );
                        } else {
                            // Clean up URL parameters after successful completion
                            const cleanUrl = window.location.pathname;
                            window.history.replaceState({}, document.title, cleanUrl);
                            return Promise.resolve({ success: true, message: 'Subaccount created successfully' });
                        }
                    } else {
                        updateStatus(`Failed to create Twilio subaccount: ${twilioResult.error}`, 'warning');
                        throw new Error(twilioResult.error);
                    }
                }).then(phoneResult => {
                    if (phoneResult && phoneResult.success && phoneResult.data) {
                        console.log('Phone number operation completed:', phoneResult);
                        updateStatus(`Phone number operation completed successfully! ${phoneResult.data.message}`, 'success');
                    } else if (phoneResult && !phoneResult.success) {
                        updateStatus(`Phone number operation failed: ${phoneResult.error}`, 'warning');
                    }
                    
                    // Clean up URL parameters after successful completion
                    const cleanUrl = window.location.pathname;
                    window.history.replaceState({}, document.title, cleanUrl);
                }).catch(error => {
                    console.error('Process error (manual flow):', error);
                    console.log('Full error object:', error);
                    console.log('Error message:', error.message);
                    console.log('Error stack:', error.stack);
                    updateStatus(`Error during process: ${error.message}`, 'danger');
                });
                
                return true; // Code was found and processed
            }
            
            return false; // No code found
        }

        // Facebook login callback (for SDK-based flow - fallback)
        const fbLoginCallback = (response) => {
            document.getElementById("sdk-response").textContent = JSON.stringify(response, null, 2);
            
            if (response.authResponse) {
                const code = response.authResponse.code;
                updateStatus('Authorization code received from SDK, exchanging for access token...', 'info');
                console.log('Using redirect URI for token exchange: null');
                
                // Prepare the token exchange request
                const tokenRequest = {
                    code: code,
                    clientId: appId,
                    clientSecret: appSecret
                };
                
                // Display the token exchange request
                document.getElementById("token-request").textContent = JSON.stringify(tokenRequest, null, 2);
                
                // Scroll to token exchange section
                document.getElementById("token-request").scrollIntoView({ behavior: 'smooth' });
                
                // Exchange the code for an access token via our backend
                fetch('/Home/ExchangeToken', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'Accept-Language': 'en-US,en;q=0.9'
                    },
                    body: JSON.stringify(tokenRequest)
                }).then(tokenResponse => {
                    return tokenResponse.json();
                }).then(tokenResult => {
                    document.getElementById("token-response").textContent = JSON.stringify(tokenResult, null, 2);
                    
                    if (tokenResult.success) {
                        updateStatus('Token exchange successful! Getting WABA details...', 'info');
                        
                        // Try different possible property names for the access token
                        const accessToken = tokenResult.access_token || tokenResult.accessToken || tokenResult.token || tokenResult.data?.access_token || tokenResult.data?.accessToken;
                        
                        if (!accessToken) {
                            console.error('Access token not found in response. Available properties:', Object.keys(tokenResult));
                            throw new Error('Access token not found in token exchange response');
                        }
                        
                        // Now get WABA details using the access token
                        return getSharedWABADetails(accessToken);
                    } else {
                        updateStatus(`Token exchange failed: ${tokenResult.error}`, 'danger');
                        throw new Error(tokenResult.error);
                    }
                }).then(wabaResult => {
                    console.log('WABA Details received:', wabaResult);
                    
                    if (wabaResult.success) {
                        updateStatus('WABA details retrieved! Creating Twilio subaccount...', 'info');
                        
                        // Create Twilio subaccount
                        return createTwilioSubaccount(wabaResult.data, phoneNumberTypeSelected);
                    } else {
                        updateStatus(`Failed to get WABA details: ${wabaResult.error}`, 'danger');
                        throw new Error(wabaResult.error);
                    }
                }).then(twilioResult => {
                    console.log('Twilio subaccount created:', twilioResult);
                    
                    if (twilioResult.success) {
                        updateStatus('Twilio subaccount created successfully! Authentication credentials are available for phone number operations.', 'success');
                        
                        // Store the subaccount details for potential phone number operations
                        const subaccountData = twilioResult.data;
                        console.log('Subaccount SID:', subaccountData.twilioSubaccountSid);
                        console.log('Authentication method:', subaccountData.authenticationMethod);
                        
                        // Determine which authentication credentials to use
                        let authSid = null;
                        let authToken = null;
                        
                        if (subaccountData.authenticationMethod === 'subaccount_auth_token' && subaccountData.twilioAuthToken) {
                            authSid = subaccountData.twilioSubaccountSid;
                            authToken = subaccountData.twilioAuthToken;
                            console.log('Using subaccount auth token for authentication');
                        } else if (subaccountData.authenticationMethod === 'main_account_credentials' && subaccountData.twilioMainAccountToken) {
                            authSid = subaccountData.twilioMainAccountSid;
                            authToken = subaccountData.twilioMainAccountToken;
                            console.log('Using main account credentials for authentication (targeting subaccount)');
                        } else {
                            console.warn('No valid authentication credentials available');
                            updateStatus('Warning: No authentication credentials available. Phone number operations may fail.', 'warning');
                        }
                        
                        // Handle phone number operations based on selected type
                        if (phoneNumberTypeSelected === 'purchase') {
                            updateStatus('Subaccount created. Handling Twilio phone number purchase...', 'info');
                            
                            // Handle Twilio phone number purchase
                            return handlePhoneNumberOperation(
                                subaccountData.twilioSubaccountSid,
                                authToken,
                                subaccountData.businessName,
                                'purchase',
                                null,
                                subaccountData.wabaId
                            );
                        } else if (phoneNumberTypeSelected === 'register-own') {
                            updateStatus('Subaccount created. Ready to register existing phone number for WhatsApp...', 'info');
                            
                            // For register-own flow, show WhatsApp Sender section immediately since there's no phone purchase step
                            document.getElementById('whatsapp-sender-section').style.display = 'block';
                            document.getElementById('whatsapp-sender-section').scrollIntoView({ behavior: 'smooth' });
                            
                            // Handle existing phone number registration for WhatsApp
                            return handlePhoneNumberOperation(
                                subaccountData.twilioSubaccountSid,
                                authToken,
                                subaccountData.businessName,
                                'register-own', // Use 'register-own' type for existing phone numbers
                                subaccountData.wabaPhoneNumberForDisplay, // Use the existing phone number from WABA
                                subaccountData.wabaId
                            );
                        } else {
                            return Promise.resolve({ success: true, message: 'Subaccount created successfully' });
                        }
                    } else {
                        updateStatus(`Failed to create Twilio subaccount: ${twilioResult.error}`, 'warning');
                        throw new Error(twilioResult.error);
                    }
                }).then(phoneResult => {
                    if (phoneResult && phoneResult.success && phoneResult.data) {
                        console.log('Phone number operation completed:', phoneResult);
                        updateStatus(`Phone number operation completed successfully! ${phoneResult.data.message}`, 'success');
                    } else if (phoneResult && !phoneResult.success) {
                        updateStatus(`Phone number operation failed: ${phoneResult.error}`, 'warning');
                    }
                }).catch(error => {
                    console.error('Process error:', error);
                    updateStatus(`Error during process: ${error.message}`, 'danger');
                });
            } else {
                updateStatus('Facebook login failed or was cancelled', 'warning');
            }
        };

        // Generate random state parameter for OAuth security
        function generateState() {
            return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        }

        // Launch WhatsApp signup flow using Manual OAuth Flow
        const launchWhatsAppSignup = () => {
            // Check if phone number type is selected
            if (!phoneNumberTypeSelected) {
                updateStatus('Please select a phone number type first', 'warning');
                return;
            }
            
            updateStatus('Starting WhatsApp signup flow using manual OAuth...', 'info');
            
            // Generate state parameter for security
            const state = generateState();
            sessionStorage.setItem('oauth_state', state);
            
            // Prepare extras based on phone number type selection
            const extras = { version: 3, sessionInfoVersion: 3 };
            if (phoneNumberTypeSelected === "purchase") {
                extras.featureType = 'only_waba_sharing';
            }
            else extras.featureType = ''; // For register-own, use default ES flow
            
            
            // Construct manual OAuth authorization URL
            const authParams = new URLSearchParams({
                client_id: appId,
                redirect_uri: redirectUri,
                state: state,
                auth_type: "rerequest", // Avoids 'user is already logged' in errors if users click the button again before refreshing the page
                response_type: 'code',
                config_id: embeddedSignupConfigurationId,
                extras: JSON.stringify(extras)
            });
            
            const authUrl = `https://www.facebook.com/${metaGraphApiVersion}/dialog/oauth?${authParams.toString()}`;
            
            console.log('Manual OAuth URL:', authUrl);
            console.log('Redirect URI used:', redirectUri);
            console.log('State parameter:', state);
            console.log('Phone number type selected:', phoneNumberTypeSelected);
            console.log('Extras used:', extras);
            
            // Redirect to Facebook authorization page
            window.location.href = authUrl;
        };

        // Fallback function to use SDK-based flow if needed
        const launchWhatsAppSignupSDK = () => {
            // Check if phone number type is selected
            if (!phoneNumberTypeSelected) {
                updateStatus('Please select a phone number type first', 'warning');
                return;
            }
            
            // Check if Facebook SDK is loaded
            if (typeof FB === 'undefined') {
                updateStatus('Facebook SDK not loaded yet. Please wait and try again.', 'warning');
                return;
            }
            
            updateStatus('Starting WhatsApp signup flow using SDK...', 'info');
            console.log('SDK Flow: Using Facebook internal cross-domain communication (no redirect URI needed)');
            console.log('Phone number type selected:', phoneNumberTypeSelected);
            
            // Prepare extras based on phone number type selection
            const extras = {
                version: 3,
                sessionInfoVersion: 3,
                setup: {
                    // solutionID: "YOUR_TWILIO_PARTNER_SOLUTION_ID", // Uncomment when you get Twilio Partner Solution ID
                }
            };
            
            if (phoneNumberTypeSelected === "purchase") {
                // For purchase flow - use only_waba_sharing to bypass phone number screens
                extras.featureType = 'only_waba_sharing';
            } else if (phoneNumberTypeSelected === "register-own") {
                // For register-own, use default ES flow
                extras.featureType = '';
            }
            
            console.log('Extras used for SDK flow:', extras);
            
            try {
                // Launch Facebook login
                FB.login(fbLoginCallback, {
                    config_id: embeddedSignupConfigurationId,
                    auth_type: "rerequest", // Avoids 'user is already logged' in errors if users click the button again before refreshing the page
                    response_type: 'code',
                    override_default_response_type: true,
                    extras: extras
                });
            } catch (error) {
                console.error('FB.login error:', error);
                updateStatus('Error starting Facebook login: ' + error.message, 'danger');
            }
        };

        async function getSharedWABADetails(accessToken) {
            try {
                const requestData = { AccessToken: accessToken };
                
                document.getElementById("waba-request").textContent = JSON.stringify(requestData, null, 2);
                
                // Scroll to WABA details section
                document.getElementById("waba-request").scrollIntoView({ behavior: 'smooth' });
                
                const response = await fetch('/Home/GetSharedWABADetails', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'Accept-Language': 'en-US,en;q=0.9'
                    },
                    body: JSON.stringify(requestData)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const responseData = await response.json();
                
                document.getElementById("waba-response").textContent = JSON.stringify(responseData, null, 2);
                
                return responseData;
            } catch (error) {
                console.error('Error getting WABA details:', error);
                
                document.getElementById("waba-response").textContent = JSON.stringify({
                    error: true,
                    message: error.message,
                    timestamp: new Date().toISOString()
                }, null, 2);
                
                throw error;
            }
        }

        async function createTwilioSubaccount(wabaData, phoneNumberType) {
            try {
                const validPhoneNumberType = phoneNumberType || phoneNumberTypeSelected || 'unknown';
                
                const requestData = {
                    BusinessName: wabaData.name || wabaData.verified_name || 'WhatsApp Business',
                    WabaId: wabaData.id,
                    // Phone number details are passed through for subsequent operations
                    PhoneNumberId: wabaData.phone_number_id,
                    DisplayPhoneNumber: wabaData.display_phone_number,
                    PhoneNumberType: validPhoneNumberType
                };
                
                console.log('Creating Twilio subaccount with data:', requestData);
                console.log('Phone number type used:', validPhoneNumberType);
                
                document.getElementById("twilio-request").textContent = JSON.stringify(requestData, null, 2);
                
                // Scroll to Twilio subaccount section
                document.getElementById("twilio-request").scrollIntoView({ behavior: 'smooth' });
                
                const response = await fetch('/Home/CreateTwilioSubaccount', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'Accept-Language': 'en-US,en;q=0.9'
                    },
                    body: JSON.stringify(requestData)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const responseData = await response.json();
                
                document.getElementById("twilio-response").textContent = JSON.stringify(responseData, null, 2);
                
                return responseData;
            } catch (error) {
                console.error('Error creating Twilio subaccount:', error);
                
                document.getElementById("twilio-response").textContent = JSON.stringify({
                    error: true,
                    message: error.message,
                    timestamp: new Date().toISOString()
                }, null, 2);
                
                throw error;
            }
        }

        async function handlePhoneNumberOperation(subaccountSid, subaccountAuthToken, businessName, phoneNumberType, existingPhoneNumber = null, wabaId = null) {
            try {
                console.log('Handling phone number operation:', { phoneNumberType, existingPhoneNumber, wabaId });
                
                if (phoneNumberType === 'purchase') {
                    showPhoneNumberPurchaseInterface(subaccountSid, subaccountAuthToken, businessName, wabaId);
                    return { success: true, message: 'Phone number purchase interface activated' };
                }
                
                if (phoneNumberType === 'register-own') {
                    console.log('Handling existing phone number registration for WhatsApp Business');
                    
                    if (!existingPhoneNumber) {
                        throw new Error('Existing phone number is required for register-own operation');
                    }
                    
                    if (!wabaId) {
                        throw new Error('WABA ID is required for phone number registration');
                    }
                    
                    console.log('Registering phone number with Twilio WhatsApp Senders API...');
                    
                    const registerRequest = {
                        SubaccountSid: subaccountSid,
                        SubaccountAuthToken: subaccountAuthToken,
                        PhoneNumber: existingPhoneNumber,
                        BusinessName: businessName,
                        WabaId: wabaId
                    };
                    
                    document.getElementById("whatsapp-sender-request").textContent = JSON.stringify(registerRequest, null, 2);
                    console.log('WhatsApp Sender Registration Request:', registerRequest);
                    
                    // Scroll to WhatsApp sender section
                    document.getElementById("whatsapp-sender-section").scrollIntoView({ behavior: 'smooth' });
                    
                    const antiforgeryToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    if (!antiforgeryToken) {
                        console.error('Anti-forgery token not found');
                        throw new Error('Security token not found. Please refresh the page.');
                    }
                    
                    const response = await fetch('/Home/RegisterPhoneNumberForWhatsApp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiforgeryToken
                        },
                        body: JSON.stringify(registerRequest)
                    });
                    
                    let result;
                    try {
                        const responseText = await response.text();
                        console.log('Raw response:', responseText);
                        
                        if (!responseText.trim()) {
                            throw new Error('Empty response from server');
                        }
                        
                        result = JSON.parse(responseText);
                    } catch (parseError) {
                        console.error('JSON parsing error:', parseError);
                        console.error('Response status:', response.status);
                        console.error('Response headers:', response.headers);
                        
                        const errorResult = {
                            error: true,
                            message: `Failed to parse response: ${parseError.message}`,
                            details: 'Unexpected end of JSON input - server may have returned an error or empty response',
                            httpStatus: response.status,
                            timestamp: new Date().toISOString()
                        };
                        
                        document.getElementById("whatsapp-sender-response").textContent = JSON.stringify(errorResult, null, 2);
                        throw new Error(`JSON parsing failed: ${parseError.message}. Check server logs for details.`);
                    }
                    
                    document.getElementById("whatsapp-sender-response").textContent = JSON.stringify(result, null, 2);
                    console.log('WhatsApp Sender Registration Response:', result);
                    
                    if (result.success) {
                        console.log('Phone number registered successfully with Twilio WhatsApp Senders:', result.data);
                        return {
                            success: true,
                            message: `Phone number ${existingPhoneNumber} registered with Twilio WhatsApp Senders successfully`,
                            data: result.data
                        };
                    } else {
                        throw new Error(result.error || 'Failed to register phone number with Twilio WhatsApp Senders');
                    }
                }
                
                throw new Error(`Unsupported phone number type: ${phoneNumberType}. Only 'purchase' and 'register-own' are supported.`);
                
            } catch (error) {
                console.error('Error handling phone number operation:', error);
                
                const errorResponse = {
                    error: true,
                    message: error.message,
                    timestamp: new Date().toISOString()
                };
                
                if (phoneNumberType === 'register-own') {
                    document.getElementById("whatsapp-sender-response").textContent = JSON.stringify(errorResponse, null, 2);
                } else {
                    document.getElementById("twilio-response").textContent = JSON.stringify(errorResponse, null, 2);
                }
                
                throw error;
            }
        }

        // ============================================================================
        // PHONE NUMBER PURCHASE WORKFLOW FUNCTIONS
        // ============================================================================

        // Global variables for phone number purchase workflow
        let currentSubaccountSid = null;
        let currentSubaccountAuthToken = null;
        let currentMainAccountSid = null;
        let currentMainAccountToken = null;
        let currentAuthenticationMethod = null;
        let currentBusinessName = null;
        let currentWabaId = null;
        let selectedCountryCode = null;
        let selectedPhoneNumberType = null;
        let selectedPhoneNumber = null;

        function showPhoneNumberPurchaseInterface(subaccountSid, subaccountAuthToken, businessName, wabaId = null) {
            console.log('Showing phone number purchase interface', { subaccountSid, businessName, wabaId });
            
            currentSubaccountSid = subaccountSid;
            currentSubaccountAuthToken = subaccountAuthToken;
            currentBusinessName = businessName;
            currentWabaId = wabaId;
            
            if (wabaId) {
                console.log(`WABA ID ${wabaId} will be linked to Twilio subaccount ${subaccountSid} for phone number registration`);
                updateStatus(`WABA ID ${wabaId} linked to subaccount. Ready for phone number purchase.`, 'info');
            } else {
                console.warn('No WABA ID provided - this may cause issues during WhatsApp phone number registration');
                updateStatus('Warning: No WABA ID available. WhatsApp registration may fail.', 'warning');
            }
            
            document.getElementById('phone-number-purchase-section').style.display = 'block';
            
            loadAvailableCountries();
            
            document.getElementById('phone-number-purchase-section').scrollIntoView({ behavior: 'smooth' });
        }

        async function loadAvailableCountries() {
            const loadBtn = document.getElementById('load-countries-btn');
            const countrySelect = document.getElementById('country-select');
            
            try {
                loadBtn.disabled = true;
                loadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading...';
                countrySelect.innerHTML = '<option value="">Loading countries...</option>';
                
                const requestData = {
                    SubaccountSid: currentSubaccountSid,
                    SubaccountAuthToken: currentSubaccountAuthToken
                };
                
                console.log('Loading available countries:', requestData);
                
                const response = await fetch('/Home/GetAvailableCountries', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'Accept-Language': 'en-US,en;q=0.9'
                    },
                    body: JSON.stringify(requestData)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const result = await response.json();
                
                if (result.success && result.data && result.data.countries) {
                    console.log('Countries loaded:', result.data.countries.length);
                    
                    countrySelect.innerHTML = '<option value="">Select a country...</option>';
                    result.data.countries.forEach(country => {
                        const option = document.createElement('option');
                        option.value = country.countryCode;
                        option.textContent = `${country.country} (${country.countryCode})`;
                        countrySelect.appendChild(option);
                    });
                    
                    updateStatus(`Loaded ${result.data.countries.length} available countries`, 'success');
                } else {
                    throw new Error(result.error || 'Failed to load countries');
                }
            } catch (error) {
                console.error('Error loading countries:', error);
                countrySelect.innerHTML = '<option value="">Error loading countries</option>';
                updateStatus(`Error loading countries: ${error.message}`, 'danger');
            } finally {
                loadBtn.disabled = false;
                loadBtn.innerHTML = '<i class="fas fa-globe"></i> Refresh Countries';
            }
        }

        function onCountrySelected() {
            const countrySelect = document.getElementById('country-select');
            selectedCountryCode = countrySelect.value;
            
            console.log('Country selected:', selectedCountryCode);
            
            if (selectedCountryCode) {
                // Show phone type selection step
                document.getElementById('phone-type-selection-step').style.display = 'block';
                // Hide subsequent steps
                document.getElementById('phone-numbers-list-step').style.display = 'none';
                document.getElementById('purchase-progress-step').style.display = 'none';
                document.getElementById('whatsapp-registration-step').style.display = 'none';
                document.getElementById('whatsapp-sender-section').style.display = 'none';
                
                updateStatus(`Country selected: ${countrySelect.selectedOptions[0].textContent}`, 'info');
            } else {
                // Hide subsequent steps
                document.getElementById('phone-type-selection-step').style.display = 'none';
                document.getElementById('phone-numbers-list-step').style.display = 'none';
                document.getElementById('purchase-progress-step').style.display = 'none';
                document.getElementById('whatsapp-registration-step').style.display = 'none';
                document.getElementById('whatsapp-sender-section').style.display = 'none';
            }
        }

        // Handle phone type selection (local or mobile)
        function onPhoneTypeSelected() {
            const localRadio = document.getElementById('purchase-local');
            const mobileRadio = document.getElementById('purchase-mobile');
            
            selectedPhoneNumberType = localRadio.checked ? 'local' : (mobileRadio.checked ? 'mobile' : null);
            
            console.log('Phone type selected:', selectedPhoneNumberType);
            
            if (selectedPhoneNumberType) {
                // Show Step 3: Phone numbers list
                document.getElementById('phone-numbers-list-step').style.display = 'block';
                // Hide subsequent steps
                document.getElementById('purchase-progress-step').style.display = 'none';
                document.getElementById('whatsapp-registration-step').style.display = 'none';
                document.getElementById('whatsapp-sender-section').style.display = 'none';
                
                updateStatus(`Phone type selected: ${selectedPhoneNumberType}`, 'info');
                
                // Auto-load phone numbers
                loadAvailablePhoneNumbers();
            } else {
                // Hide subsequent steps if no phone type selected
                document.getElementById('phone-numbers-list-step').style.display = 'none';
                document.getElementById('purchase-progress-step').style.display = 'none';
                document.getElementById('whatsapp-registration-step').style.display = 'none';
                document.getElementById('whatsapp-sender-section').style.display = 'none';
            }
        }

        // Load available phone numbers for selected country and type
        async function loadAvailablePhoneNumbers() {
            const container = document.getElementById('phone-numbers-container');
            const loading = document.getElementById('phone-numbers-loading');
            
            try {
                loading.style.display = 'block';
                container.innerHTML = '';
                
                const requestData = {
                    SubaccountSid: currentSubaccountSid,
                    SubaccountAuthToken: currentSubaccountAuthToken,
                    CountryCode: selectedCountryCode,
                    PhoneNumberType: selectedPhoneNumberType,
                    Limit: 20
                };
                
                console.log('Loading available phone numbers:', requestData);
                
                const response = await fetch('/Home/GetAvailablePhoneNumbers', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'Accept-Language': 'en-US,en;q=0.9'
                    },
                    body: JSON.stringify(requestData)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const result = await response.json();
                
                if (result.success && result.data && result.data.phoneNumbers) {
                    console.log('Phone numbers loaded:', result.data.phoneNumbers.length);
                    
                    if (result.data.phoneNumbers.length === 0) {
                        container.innerHTML = '<div class="alert alert-warning">No phone numbers available for the selected country and type.</div>';
                    } else {
                        // Create phone numbers table and populate it
                        const table = document.createElement('table');
                        table.className = 'table table-striped table-hover';
                        table.innerHTML = `
                            <thead class="thead-light">
                                <tr>
                                    <th>Phone Number</th>
                                    <th>Location</th>
                                    <th>Capabilities</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        `;
                        
                        const tbody = table.querySelector('tbody');
                        
                        result.data.phoneNumbers.forEach(number => {
                            const row = document.createElement('tr');
                            
                            const capabilities = [];
                            if (number.capabilities.voice) capabilities.push('<span class="badge badge-success">Voice</span>');
                            if (number.capabilities.sms) capabilities.push('<span class="badge badge-primary">SMS</span>');
                            if (number.capabilities.mms) capabilities.push('<span class="badge badge-info">MMS</span>');
                            if (number.capabilities.fax) capabilities.push('<span class="badge badge-secondary">Fax</span>');
                            
                            row.innerHTML = `
                                <td><strong>${number.phoneNumber}</strong></td>
                                <td>
                                    ${number.locality || number.region || number.isoCountry}<br>
                                    <small class="text-muted">${number.postalCode || ''}</small>
                                </td>
                                <td>${capabilities.join(' ')}</td>
                                <td>
                                    <button class="btn btn-success btn-sm" onclick="purchasePhoneNumber('${number.phoneNumber}')">
                                        <i class="fas fa-shopping-cart"></i> Buy
                                    </button>
                                </td>
                            `;
                            
                            tbody.appendChild(row);
                        });
                        
                        container.appendChild(table);
                    }
                    
                    updateStatus(`Found ${result.data.phoneNumbers.length} available ${selectedPhoneNumberType} numbers for ${selectedCountryCode}`, 'success');
                } else {
                    throw new Error(result.error || 'Failed to load phone numbers');
                }
            } catch (error) {
                console.error('Error loading phone numbers:', error);
                container.innerHTML = `<div class="alert alert-danger">Error loading phone numbers: ${error.message}</div>`;
                updateStatus(`Error loading phone numbers: ${error.message}`, 'danger');
            } finally {
                loading.style.display = 'none';
            }
        }

        function refreshPhoneNumbers() {
            if (selectedCountryCode && selectedPhoneNumberType) {
                loadAvailablePhoneNumbers();
            }
        }

        async function purchasePhoneNumber(phoneNumber) {
            console.log('Purchasing phone number:', phoneNumber);
            selectedPhoneNumber = phoneNumber;
            
            // Show Step 4: Purchase Progress and hide subsequent steps
            document.getElementById('purchase-progress-step').style.display = 'block';
            document.getElementById('whatsapp-registration-step').style.display = 'none';
            document.getElementById('whatsapp-sender-section').style.display = 'none';
            
            const progressBar = document.getElementById('purchase-progress-bar');
            const statusDiv = document.getElementById('purchase-status');
            
            try {
                // Step 1: Start purchase
                progressBar.style.width = '25%';
                statusDiv.className = 'alert alert-info';
                statusDiv.textContent = 'Starting phone number purchase...';
                
                const requestData = {
                    SubaccountSid: currentSubaccountSid,
                    SubaccountAuthToken: currentSubaccountAuthToken,
                    PhoneNumber: phoneNumber,
                    BusinessName: currentBusinessName,
                    CountryCode: selectedCountryCode
                };
                
                console.log('Purchase request:', requestData);
                
                // Step 2: Call purchase API
                progressBar.style.width = '50%';
                statusDiv.textContent = 'Purchasing phone number from Twilio...';
                
                const response = await fetch('/Home/PurchasePhoneNumber', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'Accept-Language': 'en-US,en;q=0.9'
                    },
                    body: JSON.stringify(requestData)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    // Step 3: Purchase successful
                    progressBar.style.width = '100%';
                    progressBar.className = 'progress-bar bg-success';
                    statusDiv.className = 'alert alert-success';
                    statusDiv.innerHTML = `
                        <strong>Phone number purchased successfully!</strong><br>
                        Phone Number: <strong>${phoneNumber}</strong><br>
                        Phone Number SID: <code>${result.data.phoneNumberSid}</code>
                    `;
                    
                    console.log('Phone number purchased successfully:', result.data);
                    updateStatus(`Phone number ${phoneNumber} purchased successfully!`, 'success');
                    
                    // Show WhatsApp registration step
                    document.getElementById('purchased-phone-number').textContent = phoneNumber;
                    document.getElementById('whatsapp-registration-step').style.display = 'block';
                    
                    // Show WhatsApp Sender section after successful phone number purchase
                    document.getElementById('whatsapp-sender-section').style.display = 'block';
                    
                    // Scroll to the WhatsApp registration section
                    document.getElementById('whatsapp-registration-step').scrollIntoView({ behavior: 'smooth' });
                    
                } else {
                    throw new Error(result.error || 'Purchase failed');
                }
            } catch (error) {
                console.error('Error purchasing phone number:', error);
                progressBar.className = 'progress-bar bg-danger';
                statusDiv.className = 'alert alert-danger';
                statusDiv.innerHTML = `<strong>Purchase failed:</strong> ${error.message}`;
                updateStatus(`Failed to purchase phone number: ${error.message}`, 'danger');
            }
        }

        async function registerPhoneNumberForWhatsApp() {
            const button = document.getElementById('register-whatsapp-btn');
            const statusDiv = document.getElementById('whatsapp-registration-status');
            
            try {
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Registering for WhatsApp...';
                statusDiv.style.display = 'block';
                statusDiv.className = 'alert alert-info';
                statusDiv.textContent = 'Registering phone number for WhatsApp Business...';
                
                // Validate that we have the WABA ID from embedded signup flow
                if (!currentWabaId) {
                    throw new Error('WABA ID is required for WhatsApp registration. This should have been provided from the embedded signup flow.');
                }
                
                const requestData = {
                    SubaccountSid: currentSubaccountSid,
                    SubaccountAuthToken: currentSubaccountAuthToken,
                    PhoneNumber: selectedPhoneNumber,
                    BusinessName: currentBusinessName,
                    WabaId: currentWabaId
                };
                
                console.log('WhatsApp registration request:', requestData);
                
                // Display request in WhatsApp Sender Request section
                document.getElementById("whatsapp-sender-request").textContent = JSON.stringify(requestData, null, 2);
                
                // Scroll to WhatsApp sender section
                document.getElementById("whatsapp-sender-section").scrollIntoView({ behavior: 'smooth' });
                
                const response = await fetch('/Home/RegisterPhoneNumberForWhatsApp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val(),
                        'Accept-Language': 'en-US,en;q=0.9'
                    },
                    body: JSON.stringify(requestData)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                let result;
                try {
                    const responseText = await response.text();
                    console.log('Raw WhatsApp registration response:', responseText);
                    
                    if (!responseText.trim()) {
                        throw new Error('Empty response from server');
                    }
                    
                    result = JSON.parse(responseText);
                } catch (parseError) {
                    console.error('JSON parsing error:', parseError);
                    
                    const errorResult = {
                        error: true,
                        message: `Failed to parse response: ${parseError.message}`,
                        details: 'Unexpected end of JSON input - server may have returned an error or empty response',
                        httpStatus: response.status,
                        timestamp: new Date().toISOString()
                    };
                    
                    document.getElementById("whatsapp-sender-response").textContent = JSON.stringify(errorResult, null, 2);
                    throw new Error(`JSON parsing failed: ${parseError.message}. Check server logs for details.`);
                }
                
                document.getElementById("whatsapp-sender-response").textContent = JSON.stringify(result, null, 2);
                console.log('WhatsApp registration response:', result);
                
                if (result.success) {
                    statusDiv.className = 'alert alert-success';
                    statusDiv.innerHTML = `
                        <strong>Phone number registered for WhatsApp successfully!</strong><br>
                        Phone Number: <strong>${selectedPhoneNumber}</strong><br>
                        Sender SID: <code>${result.data.senderSid}</code><br>
                        Status: <span class="badge badge-primary">${result.data.status}</span><br>
                        <small class="text-muted">Note: It may take a few minutes for the registration to complete.</small>
                    `;
                    
                    button.innerHTML = '<i class="fas fa-check"></i> Registered Successfully';
                    button.className = 'btn btn-success';
                    
                    console.log('WhatsApp registration successful:', result.data);
                    updateStatus(`Phone number ${selectedPhoneNumber} registered for WhatsApp successfully!`, 'success');
                    
                } else {
                    throw new Error(result.error || 'WhatsApp registration failed');
                }
            } catch (error) {
                console.error('Error registering for WhatsApp:', error);
                
                const errorResponse = {
                    error: true,
                    message: error.message,
                    timestamp: new Date().toISOString()
                };
                document.getElementById("whatsapp-sender-response").textContent = JSON.stringify(errorResponse, null, 2);
                
                statusDiv.className = 'alert alert-danger';
                statusDiv.innerHTML = `<strong>WhatsApp registration failed:</strong> ${error.message}`;
                
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-whatsapp"></i> Register for WhatsApp Business';
                
                updateStatus(`Failed to register for WhatsApp: ${error.message}`, 'danger');
            }
        }
    </script>
}
